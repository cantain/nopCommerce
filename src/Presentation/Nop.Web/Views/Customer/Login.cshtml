@model LoginModel
@using System.Net
@using Nop.Core
@inject IWebHelper webHelper
@{
                //Layout = "_ColumnsOne";
                Layout = "_Root.Head";

                //title
                Html.AddTitleParts(T("PageTitle.Login").Text);
                //page class
                Html.AppendPageCssClassParts("html-login-page");


    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!string.IsNullOrEmpty(this.Context.Request.Query["returnUrl"]))
    {
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + WebUtility.UrlEncode(this.Context.Request.Query["returnUrl"]), null);
            }
        }
<div class="page login-page">
    <div class="page-title">

        <img src=~/images/logo_small.png alt="云立方" >
       <h1>智能云生活管理后台</h1>
    </div>
    @await Html.PartialAsync("_ExternalAuthentication.Errors")
    <div class="page-body">
        <div class="customer-blocks">
            @if (Model.CheckoutAsGuest)
        {
                <div class="new-wrapper checkout-as-guest-or-register-block">
                    <div class="title">
                        <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                    </div>
                    <div class="text">
                        @await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })
                    </div>
                    <div class="buttons">
                        <input type="button" class="button-1 checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")" />
                        <input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                    </div>
                </div>
            }
            else
            {
                <div class="new-wrapper register-block" style="text-align:center">
                    <div class="title" >
                        <strong>新用户</strong>
                    </div>
                    <div class="text">
                       如果你还没有管理账号，请选择注册
                    </div>
                    <div class="buttons">
                        <input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                    </div>
                </div>
            }
            <div class="returning-wrapper fieldset" >
                <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" id="form1">
                    <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                    <div class="title">
                        <strong>老用户</strong>
                    </div>
                    <div class="form-fields" >
                        @if (Model.UsernamesEnabled)
    {
                            <div class="inputs">
                                <label asp-for="Username" asp-postfix=":"></label>
                                <input asp-for="Username" class="username" autofocus="autofocus"  />
                                <span asp-validation-for="Username"></span>
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                <label asp-for="Email" asp-postfix=":"></label>
                                <input asp-for="Email" class="email" autofocus="autofocus" />
                                <span asp-validation-for="Email"></span>
                            </div>
                        }
                        <div class="inputs">
                            <label asp-for="Password" asp-postfix=":"></label>
                            <input asp-for="Password" class="password" />
                            <span asp-validation-for="Password"></span>
                        </div>
                        <div class="inputs reversed">
                            <input asp-for="RememberMe" />
                            <label asp-for="RememberMe"></label>
                            <span class="forgot-password">
                                <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                            </span>
                        </div>
                        @if (Model.DisplayCaptcha)
    {
                            <div class="captcha-box">
                                <nop-captcha />
                            </div>
                        }

                        <nop-qq-captcha asp-qq-captcha-callback="callback" />
                    </div>
                    <div class="buttons">
                        <input class="button-1 login-button" onclick="" type="submit" value="@T("Account.Login.LoginButton")" />
                    </div>
                </form>
                <script>
                    var clickbysumbmit = false;
                    function callback(res) {
                        console.log(res);
                        if (res.ret === 0 && clickbysumbmit) {
                            $("form").submit();
                        }
                        clickbysumbmit = false;
                    }
                    window.onload = function () {
                        var myform = document.getElementById('form1');
                        
                        myform.onsubmit = function () {
                            var ticket = $("input[name='qq_captcha_ticket_field']").val();
                            if (ticket == "") {
                                clickbysumbmit = true;
                                $("#TencentCaptcha").trigger("click");
                                return false;
                            }
                            return true;
                        }
                    } 
                </script>
            </div>
        </div>
        @*<div class="external-authentication">
            @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
        </div>
        @await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })*@
    </div>
</div>